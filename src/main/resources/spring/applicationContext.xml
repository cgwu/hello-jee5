<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
    " default-autowire="no" default-lazy-init="false">
    
    <bean name="sitemeshFilterBean" class="com.opensymphony.sitemesh.webapp.SiteMeshFilter" />
    
    <!-- 属性文件读入 -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:jdbc.properties</value>
			</list>
		</property>
	</bean>
	<!-- 数据源定义,使用Apache DBCP 连接池 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="initialSize" value="${dataSource.initialSize}" />
		<property name="maxActive" value="${dataSource.maxActive}" />
		<property name="maxIdle" value="${dataSource.maxIdle}" />
		<property name="minIdle" value="${dataSource.minIdle}" />
		<property name="maxWait" value="${dataSource.maxWait}" />
		<!-- 
		<property name="testWhileIdle" value="true" />
		<property name="validationQuery" value="select 1"/>
		 -->
	</bean>
	<!--Hibernate SessionFatory-->	
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="hibernateProperties">
			<bean class="org.springframework.beans.factory.config.PropertiesFactoryBean">
				<property name="locations">
					<list>
						<value>classpath:hibernate.properties</value>
						<!-- <value>classpath:memcached.properties</value> -->
					</list>
				</property>
			</bean>
		</property>
		<property name="mappingLocations" value="classpath*:hibernate/*.hbm.xml" />
	</bean>
	
	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
		<constructor-arg ref="sessionFactory" />
	</bean>
	<!-- 
	<bean id="genericHibernateDao" class="com.cg.support.hibernate.GenericHibernateDao">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	 -->
	<!-- TransactionManager -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
		<property name="dataSource" ref="dataSource"/>
	</bean>
	
	<context:component-scan base-package="springInAction.actions" 
		name-generator="com.cg.support.spring.ActionBeanNameGenerator">
		<context:include-filter type="regex" expression=".*Action"/>
	</context:component-scan>
 	
 	<!-- 支持 @AspectJ 标记-->
	<aop:aspectj-autoproxy />
	
	<!-- 支持 @Transactional 标记 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	
	<context:annotation-config />
	
	<!-- i18n -->
	<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>i18n/constant</value>
				<value>i18n/jsp_common</value>
			</list>
		</property>
		<property name="useCodeAsDefaultMessage" value="true"/>
	</bean>
	<!-- 1. 基于session -->
	<!-- <bean id="localeResolver" class="org.springframework.web.servlet.i18n.SessionLocaleResolver"/> -->
	<!-- 2. 基于请求头,需要继承 -->
	<!-- <bean id="localeResolver" class="org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver"/> -->
	<!-- 3.基于cookie -->
	<bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver">
		<property name="defaultLocale" value="zh_CN"/>
		<property name="cookieName" value="locale"/>
	</bean>
	<!-- 定义本地化变更拦截器 -->
	<!-- 
 	<bean id="localeChangeInterceptor" class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor" />
 	<bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">
		<property name="order" value="0" />
		<property name="interceptors" ref="localeChangeInterceptor" />
	</bean>
	 -->
	<bean id="myAspect" class="springInAction.aop.NotVeryUsefulAspect" />
	<bean id="beforeAspect" class="springInAction.aop.BeforeAspectExample" />
	<bean id="afterAspect" class="springInAction.aop.AfterAspectExample" />
	<bean id="aroundAspect" class="springInAction.aop.AroundAspectExample"/>
	<bean id="logingAspect" class="springInAction.aop.LogingAspect" />
 
 	<bean id="userService" class="struts2InAction.services.UserService" />
	
 	<!-- Filter bean -->
 	<bean id="logingFilter" class="com.cg.web.filters.LogingFilter" />
	
	<!-- Dao -->
	<bean id="eventService" class="org.hibernate.tutorial.services.EventService" />
 </beans>
 